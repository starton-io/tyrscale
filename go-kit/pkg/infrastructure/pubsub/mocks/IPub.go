// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	message "github.com/ThreeDotsLabs/watermill/message"
	mock "github.com/stretchr/testify/mock"
)

// IPub is an autogenerated mock type for the IPub type
type IPub struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IPub) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, topic, _a2
func (_m *IPub) Publish(ctx context.Context, topic string, _a2 ...*message.Message) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*message.Message) error); ok {
		r0 = rf(ctx, topic, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPub creates a new instance of IPub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPub(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPub {
	mock := &IPub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

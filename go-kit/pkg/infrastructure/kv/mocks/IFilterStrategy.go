// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IFilterStrategy is an autogenerated mock type for the IFilterStrategy type
type IFilterStrategy struct {
	mock.Mock
}

// GetFilter provides a mock function with given fields:
func (_m *IFilterStrategy) GetFilter() (int64, string, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilter")
	}

	var r0 int64
	var r1 string
	var r2 bool
	if rf, ok := ret.Get(0).(func() (int64, string, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// ShouldInclude provides a mock function with given fields: _a0
func (_m *IFilterStrategy) ShouldInclude(_a0 []byte) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ShouldInclude")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIFilterStrategy creates a new instance of IFilterStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFilterStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFilterStrategy {
	mock := &IFilterStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

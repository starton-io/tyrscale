/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type RpcsAPI interface {

	/*
	CreateRpc Create a new Rpc

	Create a new Rpc

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateRpcRequest
	*/
	CreateRpc(ctx context.Context) ApiCreateRpcRequest

	// CreateRpcExecute executes the request
	//  @return ResponsesCreatedSuccessResponseCreateRpcRes
	CreateRpcExecute(r ApiCreateRpcRequest) (*ResponsesCreatedSuccessResponseCreateRpcRes, *http.Response, error)

	/*
	DeleteRPC Delete a RPC

	Delete a RPC

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid UUID
	@return ApiDeleteRPCRequest
	*/
	DeleteRPC(ctx context.Context, uuid string) ApiDeleteRPCRequest

	// DeleteRPCExecute executes the request
	//  @return ResponsesDefaultSuccessResponseWithoutData
	DeleteRPCExecute(r ApiDeleteRPCRequest) (*ResponsesDefaultSuccessResponseWithoutData, *http.Response, error)

	/*
	ListRPCs List RPCs

	List RPCs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListRPCsRequest
	*/
	ListRPCs(ctx context.Context) ApiListRPCsRequest

	// ListRPCsExecute executes the request
	//  @return ResponsesDefaultSuccessResponseListRpcRes
	ListRPCsExecute(r ApiListRPCsRequest) (*ResponsesDefaultSuccessResponseListRpcRes, *http.Response, error)

	/*
	UpdateRPC Update a RPC

	Update a RPC

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateRPCRequest
	*/
	UpdateRPC(ctx context.Context) ApiUpdateRPCRequest

	// UpdateRPCExecute executes the request
	//  @return ResponsesDefaultSuccessResponseWithoutData
	UpdateRPCExecute(r ApiUpdateRPCRequest) (*ResponsesDefaultSuccessResponseWithoutData, *http.Response, error)
}

// RpcsAPIService RpcsAPI service
type RpcsAPIService service

type ApiCreateRpcRequest struct {
	ctx context.Context
	ApiService RpcsAPI
	rpc *CreateRpcReq
}

// Rpc request
func (r ApiCreateRpcRequest) Rpc(rpc CreateRpcReq) ApiCreateRpcRequest {
	r.rpc = &rpc
	return r
}

func (r ApiCreateRpcRequest) Execute() (*ResponsesCreatedSuccessResponseCreateRpcRes, *http.Response, error) {
	return r.ApiService.CreateRpcExecute(r)
}

/*
CreateRpc Create a new Rpc

Create a new Rpc

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRpcRequest
*/
func (a *RpcsAPIService) CreateRpc(ctx context.Context) ApiCreateRpcRequest {
	return ApiCreateRpcRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponsesCreatedSuccessResponseCreateRpcRes
func (a *RpcsAPIService) CreateRpcExecute(r ApiCreateRpcRequest) (*ResponsesCreatedSuccessResponseCreateRpcRes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponsesCreatedSuccessResponseCreateRpcRes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RpcsAPIService.CreateRpc")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rpcs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rpc == nil {
		return localVarReturnValue, nil, reportError("rpc is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rpc
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponsesBadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponsesInternalServerErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRPCRequest struct {
	ctx context.Context
	ApiService RpcsAPI
	uuid string
}

func (r ApiDeleteRPCRequest) Execute() (*ResponsesDefaultSuccessResponseWithoutData, *http.Response, error) {
	return r.ApiService.DeleteRPCExecute(r)
}

/*
DeleteRPC Delete a RPC

Delete a RPC

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid UUID
 @return ApiDeleteRPCRequest
*/
func (a *RpcsAPIService) DeleteRPC(ctx context.Context, uuid string) ApiDeleteRPCRequest {
	return ApiDeleteRPCRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return ResponsesDefaultSuccessResponseWithoutData
func (a *RpcsAPIService) DeleteRPCExecute(r ApiDeleteRPCRequest) (*ResponsesDefaultSuccessResponseWithoutData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponsesDefaultSuccessResponseWithoutData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RpcsAPIService.DeleteRPC")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rpcs/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponsesNotFoundResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponsesInternalServerErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRPCsRequest struct {
	ctx context.Context
	ApiService RpcsAPI
	uuid *string
	chainId *string
	provider *string
	type_ *string
	networkName *string
	sortBy *string
	sortAscending *bool
}

// UUID
func (r ApiListRPCsRequest) Uuid(uuid string) ApiListRPCsRequest {
	r.uuid = &uuid
	return r
}

// Chain ID
func (r ApiListRPCsRequest) ChainId(chainId string) ApiListRPCsRequest {
	r.chainId = &chainId
	return r
}

// provider
func (r ApiListRPCsRequest) Provider(provider string) ApiListRPCsRequest {
	r.provider = &provider
	return r
}

// type
func (r ApiListRPCsRequest) Type_(type_ string) ApiListRPCsRequest {
	r.type_ = &type_
	return r
}

// network_name
func (r ApiListRPCsRequest) NetworkName(networkName string) ApiListRPCsRequest {
	r.networkName = &networkName
	return r
}

// sort_by
func (r ApiListRPCsRequest) SortBy(sortBy string) ApiListRPCsRequest {
	r.sortBy = &sortBy
	return r
}

// sort_ascending
func (r ApiListRPCsRequest) SortAscending(sortAscending bool) ApiListRPCsRequest {
	r.sortAscending = &sortAscending
	return r
}

func (r ApiListRPCsRequest) Execute() (*ResponsesDefaultSuccessResponseListRpcRes, *http.Response, error) {
	return r.ApiService.ListRPCsExecute(r)
}

/*
ListRPCs List RPCs

List RPCs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRPCsRequest
*/
func (a *RpcsAPIService) ListRPCs(ctx context.Context) ApiListRPCsRequest {
	return ApiListRPCsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponsesDefaultSuccessResponseListRpcRes
func (a *RpcsAPIService) ListRPCsExecute(r ApiListRPCsRequest) (*ResponsesDefaultSuccessResponseListRpcRes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponsesDefaultSuccessResponseListRpcRes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RpcsAPIService.ListRPCs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rpcs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.uuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uuid", r.uuid, "")
	}
	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chain_id", r.chainId, "")
	}
	if r.provider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "provider", r.provider, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.networkName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network_name", r.networkName, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	}
	if r.sortAscending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_ascending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRPCRequest struct {
	ctx context.Context
	ApiService RpcsAPI
	rpc *Rpc
}

// RPC Object request
func (r ApiUpdateRPCRequest) Rpc(rpc Rpc) ApiUpdateRPCRequest {
	r.rpc = &rpc
	return r
}

func (r ApiUpdateRPCRequest) Execute() (*ResponsesDefaultSuccessResponseWithoutData, *http.Response, error) {
	return r.ApiService.UpdateRPCExecute(r)
}

/*
UpdateRPC Update a RPC

Update a RPC

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateRPCRequest
*/
func (a *RpcsAPIService) UpdateRPC(ctx context.Context) ApiUpdateRPCRequest {
	return ApiUpdateRPCRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponsesDefaultSuccessResponseWithoutData
func (a *RpcsAPIService) UpdateRPCExecute(r ApiUpdateRPCRequest) (*ResponsesDefaultSuccessResponseWithoutData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponsesDefaultSuccessResponseWithoutData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RpcsAPIService.UpdateRPC")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rpcs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rpc == nil {
		return localVarReturnValue, nil, reportError("rpc is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rpc
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponsesBadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponsesInternalServerErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

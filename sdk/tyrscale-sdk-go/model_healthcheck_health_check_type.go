/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"fmt"
)

// HealthcheckHealthCheckType the model 'HealthcheckHealthCheckType'
type HealthcheckHealthCheckType string

// List of healthcheck.HealthCheckType
const (
	EthBlockNumberType HealthcheckHealthCheckType = "eth_block_number"
	EthSyncingType HealthcheckHealthCheckType = "eth_syncing"
)

// All allowed values of HealthcheckHealthCheckType enum
var AllowedHealthcheckHealthCheckTypeEnumValues = []HealthcheckHealthCheckType{
	"eth_block_number",
	"eth_syncing",
}

func (v *HealthcheckHealthCheckType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HealthcheckHealthCheckType(value)
	for _, existing := range AllowedHealthcheckHealthCheckTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HealthcheckHealthCheckType", value)
}

// NewHealthcheckHealthCheckTypeFromValue returns a pointer to a valid HealthcheckHealthCheckType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthcheckHealthCheckTypeFromValue(v string) (*HealthcheckHealthCheckType, error) {
	ev := HealthcheckHealthCheckType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HealthcheckHealthCheckType: valid values are %v", v, AllowedHealthcheckHealthCheckTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HealthcheckHealthCheckType) IsValid() bool {
	for _, existing := range AllowedHealthcheckHealthCheckTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to healthcheck.HealthCheckType value
func (v HealthcheckHealthCheckType) Ptr() *HealthcheckHealthCheckType {
	return &v
}

type NullableHealthcheckHealthCheckType struct {
	value *HealthcheckHealthCheckType
	isSet bool
}

func (v NullableHealthcheckHealthCheckType) Get() *HealthcheckHealthCheckType {
	return v.value
}

func (v *NullableHealthcheckHealthCheckType) Set(val *HealthcheckHealthCheckType) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthcheckHealthCheckType) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthcheckHealthCheckType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthcheckHealthCheckType(val *HealthcheckHealthCheckType) *NullableHealthcheckHealthCheckType {
	return &NullableHealthcheckHealthCheckType{value: val, isSet: true}
}

func (v NullableHealthcheckHealthCheckType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthcheckHealthCheckType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


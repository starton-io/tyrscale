/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
)

// checks if the CreateRpcRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRpcRes{}

// CreateRpcRes struct for CreateRpcRes
type CreateRpcRes struct {
	Uuid *string `json:"uuid,omitempty"`
}

// NewCreateRpcRes instantiates a new CreateRpcRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRpcRes() *CreateRpcRes {
	this := CreateRpcRes{}
	return &this
}

// NewCreateRpcResWithDefaults instantiates a new CreateRpcRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRpcResWithDefaults() *CreateRpcRes {
	this := CreateRpcRes{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *CreateRpcRes) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRpcRes) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *CreateRpcRes) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *CreateRpcRes) SetUuid(v string) {
	o.Uuid = &v
}

func (o CreateRpcRes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRpcRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableCreateRpcRes struct {
	value *CreateRpcRes
	isSet bool
}

func (v NullableCreateRpcRes) Get() *CreateRpcRes {
	return v.value
}

func (v *NullableCreateRpcRes) Set(val *CreateRpcRes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRpcRes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRpcRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRpcRes(val *CreateRpcRes) *NullableCreateRpcRes {
	return &NullableCreateRpcRes{value: val, isSet: true}
}

func (v NullableCreateRpcRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRpcRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRpcReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRpcReq{}

// CreateRpcReq struct for CreateRpcReq
type CreateRpcReq struct {
	Collectors []string `json:"collectors,omitempty"`
	NetworkName string `json:"network_name"`
	Provider string `json:"provider"`
	Type RPCType `json:"type"`
	Url string `json:"url"`
	Uuid *string `json:"uuid,omitempty"`
}

type _CreateRpcReq CreateRpcReq

// NewCreateRpcReq instantiates a new CreateRpcReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRpcReq(networkName string, provider string, type_ RPCType, url string) *CreateRpcReq {
	this := CreateRpcReq{}
	this.NetworkName = networkName
	this.Provider = provider
	this.Type = type_
	this.Url = url
	return &this
}

// NewCreateRpcReqWithDefaults instantiates a new CreateRpcReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRpcReqWithDefaults() *CreateRpcReq {
	this := CreateRpcReq{}
	return &this
}

// GetCollectors returns the Collectors field value if set, zero value otherwise.
func (o *CreateRpcReq) GetCollectors() []string {
	if o == nil || IsNil(o.Collectors) {
		var ret []string
		return ret
	}
	return o.Collectors
}

// GetCollectorsOk returns a tuple with the Collectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRpcReq) GetCollectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Collectors) {
		return nil, false
	}
	return o.Collectors, true
}

// HasCollectors returns a boolean if a field has been set.
func (o *CreateRpcReq) HasCollectors() bool {
	if o != nil && !IsNil(o.Collectors) {
		return true
	}

	return false
}

// SetCollectors gets a reference to the given []string and assigns it to the Collectors field.
func (o *CreateRpcReq) SetCollectors(v []string) {
	o.Collectors = v
}

// GetNetworkName returns the NetworkName field value
func (o *CreateRpcReq) GetNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value
// and a boolean to check if the value has been set.
func (o *CreateRpcReq) GetNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkName, true
}

// SetNetworkName sets field value
func (o *CreateRpcReq) SetNetworkName(v string) {
	o.NetworkName = v
}

// GetProvider returns the Provider field value
func (o *CreateRpcReq) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *CreateRpcReq) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *CreateRpcReq) SetProvider(v string) {
	o.Provider = v
}

// GetType returns the Type field value
func (o *CreateRpcReq) GetType() RPCType {
	if o == nil {
		var ret RPCType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateRpcReq) GetTypeOk() (*RPCType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateRpcReq) SetType(v RPCType) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *CreateRpcReq) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateRpcReq) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateRpcReq) SetUrl(v string) {
	o.Url = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *CreateRpcReq) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRpcReq) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *CreateRpcReq) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *CreateRpcReq) SetUuid(v string) {
	o.Uuid = &v
}

func (o CreateRpcReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRpcReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Collectors) {
		toSerialize["collectors"] = o.Collectors
	}
	toSerialize["network_name"] = o.NetworkName
	toSerialize["provider"] = o.Provider
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

func (o *CreateRpcReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_name",
		"provider",
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRpcReq := _CreateRpcReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRpcReq)

	if err != nil {
		return err
	}

	*o = CreateRpcReq(varCreateRpcReq)

	return err
}

type NullableCreateRpcReq struct {
	value *CreateRpcReq
	isSet bool
}

func (v NullableCreateRpcReq) Get() *CreateRpcReq {
	return v.value
}

func (v *NullableCreateRpcReq) Set(val *CreateRpcReq) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRpcReq) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRpcReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRpcReq(val *CreateRpcReq) *NullableCreateRpcReq {
	return &NullableCreateRpcReq{value: val, isSet: true}
}

func (v NullableCreateRpcReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRpcReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"fmt"
)

// ProxyProxyStrategy the model 'ProxyProxyStrategy'
type ProxyProxyStrategy string

// List of proxy.ProxyStrategy
const (
	DefaultProxy ProxyProxyStrategy = "default"
	FailoverProxy ProxyProxyStrategy = "failover"
	ConcurrentProxy ProxyProxyStrategy = "concurrent"
)

// All allowed values of ProxyProxyStrategy enum
var AllowedProxyProxyStrategyEnumValues = []ProxyProxyStrategy{
	"default",
	"failover",
	"concurrent",
}

func (v *ProxyProxyStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProxyProxyStrategy(value)
	for _, existing := range AllowedProxyProxyStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProxyProxyStrategy", value)
}

// NewProxyProxyStrategyFromValue returns a pointer to a valid ProxyProxyStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProxyProxyStrategyFromValue(v string) (*ProxyProxyStrategy, error) {
	ev := ProxyProxyStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProxyProxyStrategy: valid values are %v", v, AllowedProxyProxyStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProxyProxyStrategy) IsValid() bool {
	for _, existing := range AllowedProxyProxyStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to proxy.ProxyStrategy value
func (v ProxyProxyStrategy) Ptr() *ProxyProxyStrategy {
	return &v
}

type NullableProxyProxyStrategy struct {
	value *ProxyProxyStrategy
	isSet bool
}

func (v NullableProxyProxyStrategy) Get() *ProxyProxyStrategy {
	return v.value
}

func (v *NullableProxyProxyStrategy) Set(val *ProxyProxyStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableProxyProxyStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableProxyProxyStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxyProxyStrategy(val *ProxyProxyStrategy) *NullableProxyProxyStrategy {
	return &NullableProxyProxyStrategy{value: val, isSet: true}
}

func (v NullableProxyProxyStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxyProxyStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


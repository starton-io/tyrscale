/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"fmt"
)

// StrategyName the model 'StrategyName'
type StrategyName string

// List of StrategyName
const (
	StrategyCustom StrategyName = "STRATEGY_CUSTOM"
	StrategyHighestBlock StrategyName = "STRATEGY_HIGHEST_BLOCK"
	StrategyAirUnderTheCurve StrategyName = "STRATEGY_AIR_UNDER_THE_CURVE"
)

// All allowed values of StrategyName enum
var AllowedStrategyNameEnumValues = []StrategyName{
	"STRATEGY_CUSTOM",
	"STRATEGY_HIGHEST_BLOCK",
	"STRATEGY_AIR_UNDER_THE_CURVE",
}

func (v *StrategyName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StrategyName(value)
	for _, existing := range AllowedStrategyNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StrategyName", value)
}

// NewStrategyNameFromValue returns a pointer to a valid StrategyName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStrategyNameFromValue(v string) (*StrategyName, error) {
	ev := StrategyName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StrategyName: valid values are %v", v, AllowedStrategyNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StrategyName) IsValid() bool {
	for _, existing := range AllowedStrategyNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StrategyName value
func (v StrategyName) Ptr() *StrategyName {
	return &v
}

type NullableStrategyName struct {
	value *StrategyName
	isSet bool
}

func (v NullableStrategyName) Get() *StrategyName {
	return v.value
}

func (v *NullableStrategyName) Set(val *StrategyName) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyName) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyName(val *StrategyName) *NullableStrategyName {
	return &NullableStrategyName{value: val, isSet: true}
}

func (v NullableStrategyName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


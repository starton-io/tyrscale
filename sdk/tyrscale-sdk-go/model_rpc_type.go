/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"fmt"
)

// RPCType the model 'RPCType'
type RPCType string

// List of RPCType
const (
	RPCTypePrivate RPCType = "private"
	RPCTypePublic RPCType = "public"
)

// All allowed values of RPCType enum
var AllowedRPCTypeEnumValues = []RPCType{
	"private",
	"public",
}

func (v *RPCType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RPCType(value)
	for _, existing := range AllowedRPCTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RPCType", value)
}

// NewRPCTypeFromValue returns a pointer to a valid RPCType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRPCTypeFromValue(v string) (*RPCType, error) {
	ev := RPCType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RPCType: valid values are %v", v, AllowedRPCTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RPCType) IsValid() bool {
	for _, existing := range AllowedRPCTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RPCType value
func (v RPCType) Ptr() *RPCType {
	return &v
}

type NullableRPCType struct {
	value *RPCType
	isSet bool
}

func (v NullableRPCType) Get() *RPCType {
	return v.value
}

func (v *NullableRPCType) Set(val *RPCType) {
	v.value = val
	v.isSet = true
}

func (v NullableRPCType) IsSet() bool {
	return v.isSet
}

func (v *NullableRPCType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRPCType(val *RPCType) *NullableRPCType {
	return &NullableRPCType{value: val, isSet: true}
}

func (v NullableRPCType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRPCType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


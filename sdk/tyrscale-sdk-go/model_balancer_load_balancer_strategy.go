/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"fmt"
)

// BalancerLoadBalancerStrategy the model 'BalancerLoadBalancerStrategy'
type BalancerLoadBalancerStrategy string

// List of balancer.LoadBalancerStrategy
const (
	BalancerWeightRoundRobin BalancerLoadBalancerStrategy = "weight-round-robin"
	BalancerLeastLoad BalancerLoadBalancerStrategy = "least-load"
	BalancerPriority BalancerLoadBalancerStrategy = "failover-priority"
)

// All allowed values of BalancerLoadBalancerStrategy enum
var AllowedBalancerLoadBalancerStrategyEnumValues = []BalancerLoadBalancerStrategy{
	"weight-round-robin",
	"least-load",
	"failover-priority",
}

func (v *BalancerLoadBalancerStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BalancerLoadBalancerStrategy(value)
	for _, existing := range AllowedBalancerLoadBalancerStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BalancerLoadBalancerStrategy", value)
}

// NewBalancerLoadBalancerStrategyFromValue returns a pointer to a valid BalancerLoadBalancerStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBalancerLoadBalancerStrategyFromValue(v string) (*BalancerLoadBalancerStrategy, error) {
	ev := BalancerLoadBalancerStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BalancerLoadBalancerStrategy: valid values are %v", v, AllowedBalancerLoadBalancerStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BalancerLoadBalancerStrategy) IsValid() bool {
	for _, existing := range AllowedBalancerLoadBalancerStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to balancer.LoadBalancerStrategy value
func (v BalancerLoadBalancerStrategy) Ptr() *BalancerLoadBalancerStrategy {
	return &v
}

type NullableBalancerLoadBalancerStrategy struct {
	value *BalancerLoadBalancerStrategy
	isSet bool
}

func (v NullableBalancerLoadBalancerStrategy) Get() *BalancerLoadBalancerStrategy {
	return v.value
}

func (v *NullableBalancerLoadBalancerStrategy) Set(val *BalancerLoadBalancerStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancerLoadBalancerStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancerLoadBalancerStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancerLoadBalancerStrategy(val *BalancerLoadBalancerStrategy) *NullableBalancerLoadBalancerStrategy {
	return &NullableBalancerLoadBalancerStrategy{value: val, isSet: true}
}

func (v NullableBalancerLoadBalancerStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancerLoadBalancerStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
)

// checks if the HealthCheckConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthCheckConfig{}

// HealthCheckConfig struct for HealthCheckConfig
type HealthCheckConfig struct {
	CombinedWithCircuitBreaker *bool `json:"combined_with_circuit_breaker,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Interval *int32 `json:"interval,omitempty"`
	Timeout *int32 `json:"timeout,omitempty"`
	Type *HealthcheckHealthCheckType `json:"type,omitempty"`
}

// NewHealthCheckConfig instantiates a new HealthCheckConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheckConfig() *HealthCheckConfig {
	this := HealthCheckConfig{}
	return &this
}

// NewHealthCheckConfigWithDefaults instantiates a new HealthCheckConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckConfigWithDefaults() *HealthCheckConfig {
	this := HealthCheckConfig{}
	return &this
}

// GetCombinedWithCircuitBreaker returns the CombinedWithCircuitBreaker field value if set, zero value otherwise.
func (o *HealthCheckConfig) GetCombinedWithCircuitBreaker() bool {
	if o == nil || IsNil(o.CombinedWithCircuitBreaker) {
		var ret bool
		return ret
	}
	return *o.CombinedWithCircuitBreaker
}

// GetCombinedWithCircuitBreakerOk returns a tuple with the CombinedWithCircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckConfig) GetCombinedWithCircuitBreakerOk() (*bool, bool) {
	if o == nil || IsNil(o.CombinedWithCircuitBreaker) {
		return nil, false
	}
	return o.CombinedWithCircuitBreaker, true
}

// HasCombinedWithCircuitBreaker returns a boolean if a field has been set.
func (o *HealthCheckConfig) HasCombinedWithCircuitBreaker() bool {
	if o != nil && !IsNil(o.CombinedWithCircuitBreaker) {
		return true
	}

	return false
}

// SetCombinedWithCircuitBreaker gets a reference to the given bool and assigns it to the CombinedWithCircuitBreaker field.
func (o *HealthCheckConfig) SetCombinedWithCircuitBreaker(v bool) {
	o.CombinedWithCircuitBreaker = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *HealthCheckConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *HealthCheckConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *HealthCheckConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *HealthCheckConfig) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckConfig) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *HealthCheckConfig) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *HealthCheckConfig) SetInterval(v int32) {
	o.Interval = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *HealthCheckConfig) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckConfig) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *HealthCheckConfig) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *HealthCheckConfig) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HealthCheckConfig) GetType() HealthcheckHealthCheckType {
	if o == nil || IsNil(o.Type) {
		var ret HealthcheckHealthCheckType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckConfig) GetTypeOk() (*HealthcheckHealthCheckType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HealthCheckConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given HealthcheckHealthCheckType and assigns it to the Type field.
func (o *HealthCheckConfig) SetType(v HealthcheckHealthCheckType) {
	o.Type = &v
}

func (o HealthCheckConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthCheckConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CombinedWithCircuitBreaker) {
		toSerialize["combined_with_circuit_breaker"] = o.CombinedWithCircuitBreaker
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableHealthCheckConfig struct {
	value *HealthCheckConfig
	isSet bool
}

func (v NullableHealthCheckConfig) Get() *HealthCheckConfig {
	return v.value
}

func (v *NullableHealthCheckConfig) Set(val *HealthCheckConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheckConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheckConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheckConfig(val *HealthCheckConfig) *NullableHealthCheckConfig {
	return &NullableHealthCheckConfig{value: val, isSet: true}
}

func (v NullableHealthCheckConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheckConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



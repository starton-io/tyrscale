/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Upstream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Upstream{}

// Upstream struct for Upstream
type Upstream struct {
	FasthttpSettings *UpstreamFastHTTPSettings `json:"fasthttp_settings,omitempty"`
	Host *string `json:"host,omitempty"`
	Path *string `json:"path,omitempty"`
	Port *int32 `json:"port,omitempty"`
	RpcUuid *string `json:"rpc_uuid,omitempty"`
	Scheme *string `json:"scheme,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Weight float32 `json:"weight"`
}

type _Upstream Upstream

// NewUpstream instantiates a new Upstream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpstream(weight float32) *Upstream {
	this := Upstream{}
	this.Weight = weight
	return &this
}

// NewUpstreamWithDefaults instantiates a new Upstream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpstreamWithDefaults() *Upstream {
	this := Upstream{}
	return &this
}

// GetFasthttpSettings returns the FasthttpSettings field value if set, zero value otherwise.
func (o *Upstream) GetFasthttpSettings() UpstreamFastHTTPSettings {
	if o == nil || IsNil(o.FasthttpSettings) {
		var ret UpstreamFastHTTPSettings
		return ret
	}
	return *o.FasthttpSettings
}

// GetFasthttpSettingsOk returns a tuple with the FasthttpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetFasthttpSettingsOk() (*UpstreamFastHTTPSettings, bool) {
	if o == nil || IsNil(o.FasthttpSettings) {
		return nil, false
	}
	return o.FasthttpSettings, true
}

// HasFasthttpSettings returns a boolean if a field has been set.
func (o *Upstream) HasFasthttpSettings() bool {
	if o != nil && !IsNil(o.FasthttpSettings) {
		return true
	}

	return false
}

// SetFasthttpSettings gets a reference to the given UpstreamFastHTTPSettings and assigns it to the FasthttpSettings field.
func (o *Upstream) SetFasthttpSettings(v UpstreamFastHTTPSettings) {
	o.FasthttpSettings = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *Upstream) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *Upstream) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *Upstream) SetHost(v string) {
	o.Host = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Upstream) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Upstream) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Upstream) SetPath(v string) {
	o.Path = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Upstream) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Upstream) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Upstream) SetPort(v int32) {
	o.Port = &v
}

// GetRpcUuid returns the RpcUuid field value if set, zero value otherwise.
func (o *Upstream) GetRpcUuid() string {
	if o == nil || IsNil(o.RpcUuid) {
		var ret string
		return ret
	}
	return *o.RpcUuid
}

// GetRpcUuidOk returns a tuple with the RpcUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetRpcUuidOk() (*string, bool) {
	if o == nil || IsNil(o.RpcUuid) {
		return nil, false
	}
	return o.RpcUuid, true
}

// HasRpcUuid returns a boolean if a field has been set.
func (o *Upstream) HasRpcUuid() bool {
	if o != nil && !IsNil(o.RpcUuid) {
		return true
	}

	return false
}

// SetRpcUuid gets a reference to the given string and assigns it to the RpcUuid field.
func (o *Upstream) SetRpcUuid(v string) {
	o.RpcUuid = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *Upstream) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *Upstream) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *Upstream) SetScheme(v string) {
	o.Scheme = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Upstream) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upstream) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Upstream) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Upstream) SetUuid(v string) {
	o.Uuid = &v
}

// GetWeight returns the Weight field value
func (o *Upstream) GetWeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *Upstream) GetWeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *Upstream) SetWeight(v float32) {
	o.Weight = v
}

func (o Upstream) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Upstream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FasthttpSettings) {
		toSerialize["fasthttp_settings"] = o.FasthttpSettings
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.RpcUuid) {
		toSerialize["rpc_uuid"] = o.RpcUuid
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["weight"] = o.Weight
	return toSerialize, nil
}

func (o *Upstream) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"weight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpstream := _Upstream{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpstream)

	if err != nil {
		return err
	}

	*o = Upstream(varUpstream)

	return err
}

type NullableUpstream struct {
	value *Upstream
	isSet bool
}

func (v NullableUpstream) Get() *Upstream {
	return v.value
}

func (v *NullableUpstream) Set(val *Upstream) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstream) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstream(val *Upstream) *NullableUpstream {
	return &NullableUpstream{value: val, isSet: true}
}

func (v NullableUpstream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



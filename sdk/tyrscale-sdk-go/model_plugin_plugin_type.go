/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"fmt"
)

// PluginPluginType the model 'PluginPluginType'
type PluginPluginType string

// List of plugin.PluginType
const (
	PluginTypeResponseInterceptor PluginPluginType = "ResponseInterceptor"
	PluginTypeRequestInterceptor PluginPluginType = "RequestInterceptor"
	PluginTypeMiddleware PluginPluginType = "Middleware"
)

// All allowed values of PluginPluginType enum
var AllowedPluginPluginTypeEnumValues = []PluginPluginType{
	"ResponseInterceptor",
	"RequestInterceptor",
	"Middleware",
}

func (v *PluginPluginType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PluginPluginType(value)
	for _, existing := range AllowedPluginPluginTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PluginPluginType", value)
}

// NewPluginPluginTypeFromValue returns a pointer to a valid PluginPluginType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPluginPluginTypeFromValue(v string) (*PluginPluginType, error) {
	ev := PluginPluginType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PluginPluginType: valid values are %v", v, AllowedPluginPluginTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PluginPluginType) IsValid() bool {
	for _, existing := range AllowedPluginPluginTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to plugin.PluginType value
func (v PluginPluginType) Ptr() *PluginPluginType {
	return &v
}

type NullablePluginPluginType struct {
	value *PluginPluginType
	isSet bool
}

func (v NullablePluginPluginType) Get() *PluginPluginType {
	return v.value
}

func (v *NullablePluginPluginType) Set(val *PluginPluginType) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginPluginType) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginPluginType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginPluginType(val *PluginPluginType) *NullablePluginPluginType {
	return &NullablePluginPluginType{value: val, isSet: true}
}

func (v NullablePluginPluginType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginPluginType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


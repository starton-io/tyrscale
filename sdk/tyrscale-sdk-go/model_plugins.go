/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
)

// checks if the Plugins type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plugins{}

// Plugins struct for Plugins
type Plugins struct {
	Middleware []Plugin `json:"Middleware,omitempty"`
	RequestInterceptor []Plugin `json:"RequestInterceptor,omitempty"`
	ResponseInterceptor []Plugin `json:"ResponseInterceptor,omitempty"`
}

// NewPlugins instantiates a new Plugins object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlugins() *Plugins {
	this := Plugins{}
	return &this
}

// NewPluginsWithDefaults instantiates a new Plugins object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginsWithDefaults() *Plugins {
	this := Plugins{}
	return &this
}

// GetMiddleware returns the Middleware field value if set, zero value otherwise.
func (o *Plugins) GetMiddleware() []Plugin {
	if o == nil || IsNil(o.Middleware) {
		var ret []Plugin
		return ret
	}
	return o.Middleware
}

// GetMiddlewareOk returns a tuple with the Middleware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugins) GetMiddlewareOk() ([]Plugin, bool) {
	if o == nil || IsNil(o.Middleware) {
		return nil, false
	}
	return o.Middleware, true
}

// HasMiddleware returns a boolean if a field has been set.
func (o *Plugins) HasMiddleware() bool {
	if o != nil && !IsNil(o.Middleware) {
		return true
	}

	return false
}

// SetMiddleware gets a reference to the given []Plugin and assigns it to the Middleware field.
func (o *Plugins) SetMiddleware(v []Plugin) {
	o.Middleware = v
}

// GetRequestInterceptor returns the RequestInterceptor field value if set, zero value otherwise.
func (o *Plugins) GetRequestInterceptor() []Plugin {
	if o == nil || IsNil(o.RequestInterceptor) {
		var ret []Plugin
		return ret
	}
	return o.RequestInterceptor
}

// GetRequestInterceptorOk returns a tuple with the RequestInterceptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugins) GetRequestInterceptorOk() ([]Plugin, bool) {
	if o == nil || IsNil(o.RequestInterceptor) {
		return nil, false
	}
	return o.RequestInterceptor, true
}

// HasRequestInterceptor returns a boolean if a field has been set.
func (o *Plugins) HasRequestInterceptor() bool {
	if o != nil && !IsNil(o.RequestInterceptor) {
		return true
	}

	return false
}

// SetRequestInterceptor gets a reference to the given []Plugin and assigns it to the RequestInterceptor field.
func (o *Plugins) SetRequestInterceptor(v []Plugin) {
	o.RequestInterceptor = v
}

// GetResponseInterceptor returns the ResponseInterceptor field value if set, zero value otherwise.
func (o *Plugins) GetResponseInterceptor() []Plugin {
	if o == nil || IsNil(o.ResponseInterceptor) {
		var ret []Plugin
		return ret
	}
	return o.ResponseInterceptor
}

// GetResponseInterceptorOk returns a tuple with the ResponseInterceptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugins) GetResponseInterceptorOk() ([]Plugin, bool) {
	if o == nil || IsNil(o.ResponseInterceptor) {
		return nil, false
	}
	return o.ResponseInterceptor, true
}

// HasResponseInterceptor returns a boolean if a field has been set.
func (o *Plugins) HasResponseInterceptor() bool {
	if o != nil && !IsNil(o.ResponseInterceptor) {
		return true
	}

	return false
}

// SetResponseInterceptor gets a reference to the given []Plugin and assigns it to the ResponseInterceptor field.
func (o *Plugins) SetResponseInterceptor(v []Plugin) {
	o.ResponseInterceptor = v
}

func (o Plugins) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plugins) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Middleware) {
		toSerialize["Middleware"] = o.Middleware
	}
	if !IsNil(o.RequestInterceptor) {
		toSerialize["RequestInterceptor"] = o.RequestInterceptor
	}
	if !IsNil(o.ResponseInterceptor) {
		toSerialize["ResponseInterceptor"] = o.ResponseInterceptor
	}
	return toSerialize, nil
}

type NullablePlugins struct {
	value *Plugins
	isSet bool
}

func (v NullablePlugins) Get() *Plugins {
	return v.value
}

func (v *NullablePlugins) Set(val *Plugins) {
	v.value = val
	v.isSet = true
}

func (v NullablePlugins) IsSet() bool {
	return v.isSet
}

func (v *NullablePlugins) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlugins(val *Plugins) *NullablePlugins {
	return &NullablePlugins{value: val, isSet: true}
}

func (v NullablePlugins) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlugins) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



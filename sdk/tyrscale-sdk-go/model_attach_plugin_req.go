/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttachPluginReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachPluginReq{}

// AttachPluginReq struct for AttachPluginReq
type AttachPluginReq struct {
	Config map[string]interface{} `json:"config"`
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
	Priority int32 `json:"priority"`
	Type PluginPluginType `json:"type"`
}

type _AttachPluginReq AttachPluginReq

// NewAttachPluginReq instantiates a new AttachPluginReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachPluginReq(config map[string]interface{}, name string, priority int32, type_ PluginPluginType) *AttachPluginReq {
	this := AttachPluginReq{}
	this.Config = config
	this.Name = name
	this.Priority = priority
	this.Type = type_
	return &this
}

// NewAttachPluginReqWithDefaults instantiates a new AttachPluginReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachPluginReqWithDefaults() *AttachPluginReq {
	this := AttachPluginReq{}
	return &this
}

// GetConfig returns the Config field value
func (o *AttachPluginReq) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *AttachPluginReq) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *AttachPluginReq) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AttachPluginReq) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachPluginReq) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AttachPluginReq) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AttachPluginReq) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *AttachPluginReq) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AttachPluginReq) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AttachPluginReq) SetName(v string) {
	o.Name = v
}

// GetPriority returns the Priority field value
func (o *AttachPluginReq) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *AttachPluginReq) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *AttachPluginReq) SetPriority(v int32) {
	o.Priority = v
}

// GetType returns the Type field value
func (o *AttachPluginReq) GetType() PluginPluginType {
	if o == nil {
		var ret PluginPluginType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AttachPluginReq) GetTypeOk() (*PluginPluginType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AttachPluginReq) SetType(v PluginPluginType) {
	o.Type = v
}

func (o AttachPluginReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachPluginReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["priority"] = o.Priority
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AttachPluginReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"name",
		"priority",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachPluginReq := _AttachPluginReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachPluginReq)

	if err != nil {
		return err
	}

	*o = AttachPluginReq(varAttachPluginReq)

	return err
}

type NullableAttachPluginReq struct {
	value *AttachPluginReq
	isSet bool
}

func (v NullableAttachPluginReq) Get() *AttachPluginReq {
	return v.value
}

func (v *NullableAttachPluginReq) Set(val *AttachPluginReq) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachPluginReq) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachPluginReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachPluginReq(val *AttachPluginReq) *NullableAttachPluginReq {
	return &NullableAttachPluginReq{value: val, isSet: true}
}

func (v NullableAttachPluginReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachPluginReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



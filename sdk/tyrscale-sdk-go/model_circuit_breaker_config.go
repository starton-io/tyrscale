/*
Tyrscale Manager API

This is the manager service for Tyrscale

API version: 1.0
Contact: support@starton.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tyrscalesdkgo

import (
	"encoding/json"
)

// checks if the CircuitBreakerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CircuitBreakerConfig{}

// CircuitBreakerConfig struct for CircuitBreakerConfig
type CircuitBreakerConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
	Settings *CircuitbreakerSettings `json:"settings,omitempty"`
}

// NewCircuitBreakerConfig instantiates a new CircuitBreakerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCircuitBreakerConfig() *CircuitBreakerConfig {
	this := CircuitBreakerConfig{}
	return &this
}

// NewCircuitBreakerConfigWithDefaults instantiates a new CircuitBreakerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCircuitBreakerConfigWithDefaults() *CircuitBreakerConfig {
	this := CircuitBreakerConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CircuitBreakerConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreakerConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CircuitBreakerConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CircuitBreakerConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *CircuitBreakerConfig) GetSettings() CircuitbreakerSettings {
	if o == nil || IsNil(o.Settings) {
		var ret CircuitbreakerSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CircuitBreakerConfig) GetSettingsOk() (*CircuitbreakerSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *CircuitBreakerConfig) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given CircuitbreakerSettings and assigns it to the Settings field.
func (o *CircuitBreakerConfig) SetSettings(v CircuitbreakerSettings) {
	o.Settings = &v
}

func (o CircuitBreakerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CircuitBreakerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableCircuitBreakerConfig struct {
	value *CircuitBreakerConfig
	isSet bool
}

func (v NullableCircuitBreakerConfig) Get() *CircuitBreakerConfig {
	return v.value
}

func (v *NullableCircuitBreakerConfig) Set(val *CircuitBreakerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCircuitBreakerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCircuitBreakerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircuitBreakerConfig(val *CircuitBreakerConfig) *NullableCircuitBreakerConfig {
	return &NullableCircuitBreakerConfig{value: val, isSet: true}
}

func (v NullableCircuitBreakerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircuitBreakerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



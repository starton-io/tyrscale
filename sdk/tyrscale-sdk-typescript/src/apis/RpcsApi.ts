/* tslint:disable */
/* eslint-disable */
/**
 * Tyrscale Manager API
 * This is the manager service for Tyrscale
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@starton.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRpcReq,
  ResponsesBadRequestResponse,
  ResponsesConflictResponseCreateRpcCtx,
  ResponsesCreatedSuccessResponseCreateRpcRes,
  ResponsesDefaultSuccessResponseListRpcRes,
  ResponsesDefaultSuccessResponseWithoutData,
  ResponsesInternalServerErrorResponse,
  ResponsesNotFoundResponse,
  Rpc,
} from '../models/index';
import {
    CreateRpcReqFromJSON,
    CreateRpcReqToJSON,
    ResponsesBadRequestResponseFromJSON,
    ResponsesBadRequestResponseToJSON,
    ResponsesConflictResponseCreateRpcCtxFromJSON,
    ResponsesConflictResponseCreateRpcCtxToJSON,
    ResponsesCreatedSuccessResponseCreateRpcResFromJSON,
    ResponsesCreatedSuccessResponseCreateRpcResToJSON,
    ResponsesDefaultSuccessResponseListRpcResFromJSON,
    ResponsesDefaultSuccessResponseListRpcResToJSON,
    ResponsesDefaultSuccessResponseWithoutDataFromJSON,
    ResponsesDefaultSuccessResponseWithoutDataToJSON,
    ResponsesInternalServerErrorResponseFromJSON,
    ResponsesInternalServerErrorResponseToJSON,
    ResponsesNotFoundResponseFromJSON,
    ResponsesNotFoundResponseToJSON,
    RpcFromJSON,
    RpcToJSON,
} from '../models/index';

export interface CreateRpcRequest {
    rpc: CreateRpcReq;
}

export interface DeleteRPCRequest {
    uuid: string;
}

export interface ListRPCsRequest {
    uuid?: string;
    chainId?: string;
    provider?: string;
    type?: string;
    networkName?: string;
    sortBy?: string;
    sortAscending?: boolean;
}

export interface UpdateRPCRequest {
    rpc: Rpc;
}

/**
 * 
 */
export class RpcsApi extends runtime.BaseAPI {

    /**
     * Create a new Rpc
     * Create a new Rpc
     */
    async createRpcRaw(requestParameters: CreateRpcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCreatedSuccessResponseCreateRpcRes>> {
        if (requestParameters['rpc'] == null) {
            throw new runtime.RequiredError(
                'rpc',
                'Required parameter "rpc" was null or undefined when calling createRpc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rpcs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRpcReqToJSON(requestParameters['rpc']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCreatedSuccessResponseCreateRpcResFromJSON(jsonValue));
    }

    /**
     * Create a new Rpc
     * Create a new Rpc
     */
    async createRpc(requestParameters: CreateRpcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCreatedSuccessResponseCreateRpcRes> {
        const response = await this.createRpcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a RPC
     * Delete a RPC
     */
    async deleteRPCRaw(requestParameters: DeleteRPCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseWithoutData>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteRPC().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rpcs/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseWithoutDataFromJSON(jsonValue));
    }

    /**
     * Delete a RPC
     * Delete a RPC
     */
    async deleteRPC(requestParameters: DeleteRPCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseWithoutData> {
        const response = await this.deleteRPCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List RPCs
     * List RPCs
     */
    async listRPCsRaw(requestParameters: ListRPCsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseListRpcRes>> {
        const queryParameters: any = {};

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['chainId'] != null) {
            queryParameters['chain_id'] = requestParameters['chainId'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['networkName'] != null) {
            queryParameters['network_name'] = requestParameters['networkName'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortAscending'] != null) {
            queryParameters['sort_ascending'] = requestParameters['sortAscending'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rpcs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseListRpcResFromJSON(jsonValue));
    }

    /**
     * List RPCs
     * List RPCs
     */
    async listRPCs(requestParameters: ListRPCsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseListRpcRes> {
        const response = await this.listRPCsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a RPC
     * Update a RPC
     */
    async updateRPCRaw(requestParameters: UpdateRPCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseWithoutData>> {
        if (requestParameters['rpc'] == null) {
            throw new runtime.RequiredError(
                'rpc',
                'Required parameter "rpc" was null or undefined when calling updateRPC().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rpcs`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RpcToJSON(requestParameters['rpc']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseWithoutDataFromJSON(jsonValue));
    }

    /**
     * Update a RPC
     * Update a RPC
     */
    async updateRPC(requestParameters: UpdateRPCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseWithoutData> {
        const response = await this.updateRPCRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

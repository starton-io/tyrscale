/* tslint:disable */
/* eslint-disable */
/**
 * Tyrscale Manager API
 * This is the manager service for Tyrscale
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@starton.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Network,
  ResponsesBadRequestResponse,
  ResponsesCreatedSuccessResponseCreateNetworkRes,
  ResponsesDefaultSuccessResponseDeleteNetworkRes,
  ResponsesDefaultSuccessResponseListNetworkRes,
  ResponsesInternalServerErrorResponse,
} from '../models/index';
import {
    NetworkFromJSON,
    NetworkToJSON,
    ResponsesBadRequestResponseFromJSON,
    ResponsesBadRequestResponseToJSON,
    ResponsesCreatedSuccessResponseCreateNetworkResFromJSON,
    ResponsesCreatedSuccessResponseCreateNetworkResToJSON,
    ResponsesDefaultSuccessResponseDeleteNetworkResFromJSON,
    ResponsesDefaultSuccessResponseDeleteNetworkResToJSON,
    ResponsesDefaultSuccessResponseListNetworkResFromJSON,
    ResponsesDefaultSuccessResponseListNetworkResToJSON,
    ResponsesInternalServerErrorResponseFromJSON,
    ResponsesInternalServerErrorResponseToJSON,
} from '../models/index';

export interface CreateNetworkRequest {
    network: Network;
}

export interface DeleteNetworkRequest {
    name: string;
}

export interface ListNetworksRequest {
    blockchain?: string;
    chainId?: string;
    name?: string;
}

/**
 * 
 */
export class NetworksApi extends runtime.BaseAPI {

    /**
     * Create a network
     * Create a network
     */
    async createNetworkRaw(requestParameters: CreateNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCreatedSuccessResponseCreateNetworkRes>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling createNetwork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/networks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NetworkToJSON(requestParameters['network']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCreatedSuccessResponseCreateNetworkResFromJSON(jsonValue));
    }

    /**
     * Create a network
     * Create a network
     */
    async createNetwork(requestParameters: CreateNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCreatedSuccessResponseCreateNetworkRes> {
        const response = await this.createNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a network
     * Delete a network
     */
    async deleteNetworkRaw(requestParameters: DeleteNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseDeleteNetworkRes>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteNetwork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/networks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseDeleteNetworkResFromJSON(jsonValue));
    }

    /**
     * Delete a network
     * Delete a network
     */
    async deleteNetwork(requestParameters: DeleteNetworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseDeleteNetworkRes> {
        const response = await this.deleteNetworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list networks
     * Get list networks
     */
    async listNetworksRaw(requestParameters: ListNetworksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseListNetworkRes>> {
        const queryParameters: any = {};

        if (requestParameters['blockchain'] != null) {
            queryParameters['blockchain'] = requestParameters['blockchain'];
        }

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseListNetworkResFromJSON(jsonValue));
    }

    /**
     * Get list networks
     * Get list networks
     */
    async listNetworks(requestParameters: ListNetworksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseListNetworkRes> {
        const response = await this.listNetworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

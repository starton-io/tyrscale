/* tslint:disable */
/* eslint-disable */
/**
 * Tyrscale Manager API
 * This is the manager service for Tyrscale
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@starton.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttachPluginReq,
  DetachPluginReq,
  ResponsesBadRequestResponse,
  ResponsesDefaultSuccessResponsePluginListPluginsResponse,
  ResponsesDefaultSuccessResponsePlugins,
  ResponsesDefaultSuccessResponseWithoutData,
  ResponsesInternalServerErrorResponse,
} from '../models/index';
import {
    AttachPluginReqFromJSON,
    AttachPluginReqToJSON,
    DetachPluginReqFromJSON,
    DetachPluginReqToJSON,
    ResponsesBadRequestResponseFromJSON,
    ResponsesBadRequestResponseToJSON,
    ResponsesDefaultSuccessResponsePluginListPluginsResponseFromJSON,
    ResponsesDefaultSuccessResponsePluginListPluginsResponseToJSON,
    ResponsesDefaultSuccessResponsePluginsFromJSON,
    ResponsesDefaultSuccessResponsePluginsToJSON,
    ResponsesDefaultSuccessResponseWithoutDataFromJSON,
    ResponsesDefaultSuccessResponseWithoutDataToJSON,
    ResponsesInternalServerErrorResponseFromJSON,
    ResponsesInternalServerErrorResponseToJSON,
} from '../models/index';

export interface AttachPluginRequest {
    uuid: string;
    body: AttachPluginReq;
}

export interface DetachPluginRequest {
    uuid: string;
    body: DetachPluginReq;
}

export interface ListPluginsFromRouteRequest {
    uuid: string;
}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI {

    /**
     * Attach plugin to route
     * Attach plugin to route
     */
    async attachPluginRaw(requestParameters: AttachPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseWithoutData>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling attachPlugin().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling attachPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/routes/{uuid}/attach-plugin`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttachPluginReqToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseWithoutDataFromJSON(jsonValue));
    }

    /**
     * Attach plugin to route
     * Attach plugin to route
     */
    async attachPlugin(requestParameters: AttachPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseWithoutData> {
        const response = await this.attachPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Detach plugin from route
     * Detach plugin from route
     */
    async detachPluginRaw(requestParameters: DetachPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponseWithoutData>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling detachPlugin().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling detachPlugin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/routes/{uuid}/detach-plugin`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DetachPluginReqToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponseWithoutDataFromJSON(jsonValue));
    }

    /**
     * Detach plugin from route
     * Detach plugin from route
     */
    async detachPlugin(requestParameters: DetachPluginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponseWithoutData> {
        const response = await this.detachPluginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list plugins
     * Get list plugins
     */
    async listPluginsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponsePluginListPluginsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponsePluginListPluginsResponseFromJSON(jsonValue));
    }

    /**
     * Get list plugins
     * Get list plugins
     */
    async listPlugins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponsePluginListPluginsResponse> {
        const response = await this.listPluginsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get list plugins from route
     * Get list plugins from route
     */
    async listPluginsFromRouteRaw(requestParameters: ListPluginsFromRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesDefaultSuccessResponsePlugins>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling listPluginsFromRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/routes/{uuid}/plugins`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesDefaultSuccessResponsePluginsFromJSON(jsonValue));
    }

    /**
     * Get list plugins from route
     * Get list plugins from route
     */
    async listPluginsFromRoute(requestParameters: ListPluginsFromRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesDefaultSuccessResponsePlugins> {
        const response = await this.listPluginsFromRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

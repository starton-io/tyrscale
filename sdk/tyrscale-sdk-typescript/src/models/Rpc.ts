/* tslint:disable */
/* eslint-disable */
/**
 * Tyrscale Manager API
 * This is the manager service for Tyrscale
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@starton.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RPCType } from './RPCType';
import {
    RPCTypeFromJSON,
    RPCTypeFromJSONTyped,
    RPCTypeToJSON,
} from './RPCType';

/**
 * 
 * @export
 * @interface Rpc
 */
export interface Rpc {
    /**
     * 
     * @type {number}
     * @memberof Rpc
     */
    chainId?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Rpc
     */
    collectors?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Rpc
     */
    networkName: string;
    /**
     * 
     * @type {string}
     * @memberof Rpc
     */
    provider: string;
    /**
     * 
     * @type {RPCType}
     * @memberof Rpc
     */
    type: RPCType;
    /**
     * 
     * @type {string}
     * @memberof Rpc
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Rpc
     */
    uuid?: string;
}

/**
 * Check if a given object implements the Rpc interface.
 */
export function instanceOfRpc(value: object): value is Rpc {
    if (!('networkName' in value) || value['networkName'] === undefined) return false;
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function RpcFromJSON(json: any): Rpc {
    return RpcFromJSONTyped(json, false);
}

export function RpcFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rpc {
    if (json == null) {
        return json;
    }
    return {
        
        'chainId': json['chain_id'] == null ? undefined : json['chain_id'],
        'collectors': json['collectors'] == null ? undefined : json['collectors'],
        'networkName': json['network_name'],
        'provider': json['provider'],
        'type': RPCTypeFromJSON(json['type']),
        'url': json['url'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function RpcToJSON(value?: Rpc | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'chain_id': value['chainId'],
        'collectors': value['collectors'],
        'network_name': value['networkName'],
        'provider': value['provider'],
        'type': RPCTypeToJSON(value['type']),
        'url': value['url'],
        'uuid': value['uuid'],
    };
}


// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/starton-io/tyrscale/manager/api/proxy/upstream/dto"
	mock "github.com/stretchr/testify/mock"

	upstream "github.com/starton-io/tyrscale/manager/pkg/pb/upstream"
)

// IUpstreamRepository is an autogenerated mock type for the IUpstreamRepository type
type IUpstreamRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, req
func (_m *IUpstreamRepository) Delete(ctx context.Context, req *dto.UpstreamDeleteReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpstreamDeleteReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, req
func (_m *IUpstreamRepository) List(ctx context.Context, req *dto.ListUpstreamReq) ([]*upstream.UpstreamModel, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*upstream.UpstreamModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListUpstreamReq) ([]*upstream.UpstreamModel, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListUpstreamReq) []*upstream.UpstreamModel); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*upstream.UpstreamModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListUpstreamReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, routeUuid, _a2
func (_m *IUpstreamRepository) Upsert(ctx context.Context, routeUuid string, _a2 *upstream.UpstreamModel) error {
	ret := _m.Called(ctx, routeUuid, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *upstream.UpstreamModel) error); ok {
		r0 = rf(ctx, routeUuid, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUpstreamRepository creates a new instance of IUpstreamRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUpstreamRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUpstreamRepository {
	mock := &IUpstreamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

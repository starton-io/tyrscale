// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/starton-io/tyrscale/manager/api/recommendation/dto"
	mock "github.com/stretchr/testify/mock"

	recommendation "github.com/starton-io/tyrscale/manager/pkg/pb/recommendation"
)

// IRecommendationRepository is an autogenerated mock type for the IRecommendationRepository type
type IRecommendationRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, uuid
func (_m *IRecommendationRepository) Delete(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, filterParams
func (_m *IRecommendationRepository) List(ctx context.Context, filterParams *dto.ListRecommendationReq) ([]*recommendation.RecommendationModel, error) {
	ret := _m.Called(ctx, filterParams)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*recommendation.RecommendationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListRecommendationReq) ([]*recommendation.RecommendationModel, error)); ok {
		return rf(ctx, filterParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListRecommendationReq) []*recommendation.RecommendationModel); ok {
		r0 = rf(ctx, filterParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*recommendation.RecommendationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListRecommendationReq) error); ok {
		r1 = rf(ctx, filterParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, _a1
func (_m *IRecommendationRepository) Upsert(ctx context.Context, _a1 *recommendation.RecommendationModel) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *recommendation.RecommendationModel) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRecommendationRepository creates a new instance of IRecommendationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRecommendationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRecommendationRepository {
	mock := &IRecommendationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

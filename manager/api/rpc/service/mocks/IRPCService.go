// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/starton-io/tyrscale/manager/api/rpc/dto"
	mock "github.com/stretchr/testify/mock"

	rpc "github.com/starton-io/tyrscale/manager/pkg/pb/rpc"
)

// IRPCService is an autogenerated mock type for the IRPCService type
type IRPCService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *IRPCService) Create(ctx context.Context, _a1 *dto.CreateRpcReq) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateRpcReq) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, _a1
func (_m *IRPCService) Delete(ctx context.Context, _a1 *dto.DeleteRpcReq) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeleteRpcReq) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, filterParams
func (_m *IRPCService) List(ctx context.Context, filterParams *dto.ListReq) ([]*rpc.RpcModel, error) {
	ret := _m.Called(ctx, filterParams)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*rpc.RpcModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListReq) ([]*rpc.RpcModel, error)); ok {
		return rf(ctx, filterParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListReq) []*rpc.RpcModel); ok {
		r0 = rf(ctx, filterParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.RpcModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListReq) error); ok {
		r1 = rf(ctx, filterParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *IRPCService) Update(ctx context.Context, _a1 *dto.UpdateRpcReq) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateRpcReq) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRPCService creates a new instance of IRPCService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRPCService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRPCService {
	mock := &IRPCService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
